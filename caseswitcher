#! /usr/bin/env php
<?php
$arguments = getCommandlineArguments(getopt('d:rhluv'));

if ($arguments['help']) {
    showHelp();
    exit(1);
}

if (validateArguments($arguments)) {
    try {
        $switcher = new CaseSwitcher();
        $switcher->setCase($arguments['case']);
        $switcher->setDirectory($arguments['directory']);
        $switcher->setRecursion($arguments['recursion']);
        $switcher->setVerbosity($arguments['verbosity']);

        if ($switcher->switchCase()) {
            sendFeedback('Your files were successfully renamed', 'success');
        } else {
            sendFeedback($switcher->getErrorMsg(), 'info');
        }

    } catch (\Throwable $exception) {
        sendFeedback($exception->getMessage(), 'error');
    }
}

function getCommandlineArguments(array $cliOptions)
{
    $arguments['help'] = isset($cliOptions['h']) ? : false;
    $arguments['recursion'] = isset($cliOptions['r']) ? : false;
    $arguments['directory'] = isset($cliOptions['d']) ? realpath($cliOptions['d']) : null;
    $arguments['verbosity'] = isset($cliOptions['v']) ? : false;
    $arguments['lowercase'] = isset($cliOptions['l']) ? : false;
    $arguments['uppercase'] = isset($cliOptions['u']) ? : false;
    $arguments['case'] = determineCase($arguments['lowercase'], $arguments['uppercase']);

    return $arguments;
}

function validateArguments(array $arguments)
{
    if (is_null($arguments['directory'])) {
        sendFeedback('Expected a directory. None supplied', 'error');
        showTip();
        exit(1);
    } elseif ($arguments['directory'] === false) {
        sendFeedback('You either supplied a non-existent directory or an invalid path. Please check', 'error');
        exit(1);
    } elseif ($arguments['directory'] && !file_exists($arguments['directory'])) {
        sendFeedback('The given directory does not exist', 'error');
        exit(1);
    } elseif ($arguments['directory'] && file_exists($arguments['directory']) && !is_dir($arguments['directory'])) {
        sendFeedback('The given directory appears not to be a directory', 'error');
        exit(1);
    } elseif ($arguments['directory'] && !is_writable($arguments['directory'])) {
        sendFeedback('The given directory is not writable', 'error');
        exit(1);
    }

    if (is_null($arguments['case'])) {
        sendFeedback('You did not specify any case', 'error');
        showTip();
        exit(1);
    } elseif ($arguments['case'] === false) {
        sendFeedback("You can't use both '-l' and '-u'. It does not make sense", 'error');
        showTip();
        exit(1);
    }

    return true;
}

function determineCase($lowercase, $uppercase)
{
    if ($lowercase && !$uppercase) {
        return 'lower';
    } elseif (!$lowercase && $uppercase) {
        return 'upper';
    } elseif ($lowercase && $uppercase) {
        return false;
    } elseif (!$lowercase && !$uppercase) {
        return null;
    }
}


function sendFeedback($msg, $color = null, $newLine = true)
{
    $styles = [
        'success' => "\e[1;32m%s\e[m",
        'error' => "\e[1;31;31m%s\e[m",
        'info' => "\e[1;33;33m%s\e[m"
    ];

    $format = '%s';

    if (isset($styles[$color])) {
        $format = $styles[$color];
    }

    if ($newLine) {
        $format .= PHP_EOL;
    }

    printf($format, $msg);
}

function showTip()
{
    echo <<<TIP
Type caseswitcher -h for help

TIP;
}

function showHelp()
{
    echo <<<HELP

Caseswitcher help
-----------------

\e[4;1;37mOption\e[m              \e[4;1;37mUsage\e[m
-h                  Show this help
-d [DIRECTORY]      Specify the directory to rename. Must be a valid path and writable
-r                  Instruct caseswitcher to rename recursively
-l                  Instruct caseswitcher to change filenames to lowercase
-u                  Instruct caseswitcher to change filenames to uppercase


\e[4;1;37mExample:\e[m
    \e[1;32meg1: caseswitcher -d path/to/directory -l -r\e[m
    This means change the filenames inside the directory
    to lowercase recursively.

    You can also join options together. The first example
    can be written as:
    \e[1;32meg2: caseswitcher -lrd path/to/directory\e[m


\e[4;1;37mNB:\e[m
You must specify the case you want to switch to. Either -l for
lowercase or -u for uppercase. However, you can't use both -l and -u
together. It won't make sense.
\n
HELP;
}



class CaseSwitcher
{
    private $directory;
    private $case;
    private $recursion;
    private $errMsg;
    private $verbosity;
    private $iterator;

    /**
     * Checks if the supplied path is valid
     *
     * @return bool True if the path is valid, False if it isn't
     */
    private function isValid() : bool
    {
        $dirContents = count(scandir($this->directory));
        if ($dirContents <= 2) {
            $this->errMsg = 'Given directory is empty. Nothing here to rename';
            return false;
        }
        return true;
    }


    /**
     * Rename the the directory contents to the specified case.
     *
     * @return bool
     */
    public function switchCase() : bool
    {
        if ($this->isValid()) {
            $this->iterator = $this->createIterator();
            return $this->renameDirContents($this->iterator);
        } else {
            return false;
        }
    }

    /**
     * Rename contents of a directory either one level deep or recursively
     *
     * @param Iterator $iterator The type of iterator to use
     * @return bool True if the renaming succeeds
     */
    private function renameDirContents(Iterator $iterator)
    {
        foreach ($iterator as $file) {
            $oldName = $file->getPathName();
            $newName = $this->getNewName($file);
            $renamed = @rename($oldName, $newName);

            if ($this->verbosity && $renamed) {
                $this->reportVerbosity("{$oldName} was renamed to {$newName}");
            }
        }
        return true;
    }

    private function createIterator()
    {
        switch ($this->recursion) {
            case true:
                return new \RecursiveIteratorIterator(
                    new \RecursiveDirectoryIterator($this->directory),
                    \RecursiveIteratorIterator::CHILD_FIRST
                );
                break;
            case false:
                return new \DirectoryIterator($this->directory);
                break;
            default:
                throw new \Exception('Unknown iterator type supplied');
        }
    }

    private function reportVerbosity($msg)
    {
        printf("[\e[1;32mOK\e[m] %s" . PHP_EOL, $msg);
    }

    /**
     * Converts filename to the requested case
     *
     * @param string $fileName Name of the file
     * @return string The converted version of the filename
     */
    private function changeCase($fileName) : string
    {
        switch ($this->case) {
            case 'upper':
                return strtoupper($fileName);
                break;
            case 'lower':
                return strtolower($fileName);
                break;
        }
    }


    /**
     * Gets the extension of the file
     *
     * @return string The extension of the file
     */
    private function getExtension($file)
    {
        return (empty($file)) ? '' : ".{$file}";
    }


    /**
     * Get error message
     *
     * @return string The cuurrent error message
     */
    public function getErrorMsg() : string
    {
        return $this->errMsg;
    }


    /**
     * Generate the new name of the file being renamed. This will be used by the
     * rename() function.
     *
     * @param SplFileInfo $file. The file to be renamed will be an instance of SplFileInfo
     * @return string. The new name of the file after it has been renamed
     */
    private function getNewName(\SplFileInfo $file) : string
    {
        $directory = $file->getPath();
        $filename = $this->changeCase(pathinfo($file->getFilename(), PATHINFO_FILENAME));
        $fileExt = $this->getExtension($file->getExtension());
        return "{$directory}" . DIRECTORY_SEPARATOR . "{$filename}{$fileExt}";
    }

    public function setDirectory(string $directory)
    {
        $this->directory = realpath($directory);
    }

    public function setCase(string $case)
    {
        if (!in_array($case, ['lower', 'upper'])) {
            throw new \Exception('Unrecognized case type. Use either \'lower\' or \'upper\'');
            return false;
        }

        $this->case = $case;
        return true;
    }

    public function setVerbosity(bool $verbosity)
    {
        $this->verbosity = $verbosity;
    }

    
    public function setRecursion(bool $recursion)
    {
        $this->recursion = $recursion;
    }
}
