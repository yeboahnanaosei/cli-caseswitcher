#! /usr/bin/env php
<?php

new App();

class App
{
    public function __construct()
    {

        $arguments = $this->getCommandlineArguments(getopt('d:rhluv'));

        if ($arguments['help']) {
            $this->showHelp();
            exit(1);
        }

        if ($this->validateArguments($arguments)) {
            try {
                $switcher = new CaseSwitcher();
                $switcher->setCase($arguments['case']);
                $switcher->setDirectory($arguments['directory']);
                $switcher->setRecursion($arguments['recursion']);
                $switcher->setVerboseness($arguments['verboseness']);

                if ($switcher->switchCase()) {
                    $this->sendFeedback('Your files were successfully renamed', 'success');
                } else {
                    $this->sendFeedback($switcher->getErrorMsg(), 'info');
                }

            } catch (\Throwable $exception) {
                $this->sendFeedback($exception->getMessage(), 'error');
            }
        }
    }


    /**
     * Processes and gets the options supplied via the command line as well
     * as their values
     *
     * @param array $cliOptions An array of command line options supplied to the script
     * @return array $arguments An array of the options and their values
     */
    private function getCommandlineArguments(array $cliOptions) : array
    {
        $arguments['help'] = isset($cliOptions['h']) ?: false;
        $arguments['recursion'] = isset($cliOptions['r']) ?: false;
        $arguments['directory'] = isset($cliOptions['d']) ? realpath($cliOptions['d']) : null;
        $arguments['verboseness'] = isset($cliOptions['v']) ?: false;
        $arguments['lowercase'] = isset($cliOptions['l']) ?: false;
        $arguments['uppercase'] = isset($cliOptions['u']) ?: false;
        $arguments['case'] = $this->determineCase($arguments['lowercase'], $arguments['uppercase']);

        return $arguments;
    }

    /**
     * Validates and ensures that the options or arguments supplied via
     * the command line are valid and can be used.
     *
     * @param array $arguments An array of arguments from the command line
     * @return bool Returns true if all arguments are found to be valid. Exits on failure
     */
    private function validateArguments(array $arguments) : bool
    {
        if ($this->validateDirectory($arguments['directory']) &&
            $this->validateCase($arguments['case'])
        ) {
            return true;
        } else {
            return false;
        }

    }


    private function validateDirectory(?string $directoryPath): bool
    {
        if (is_null($directoryPath)) {
            $this->sendFeedback('Expected a directory. None supplied', 'error');
            $this->showTip();
            exit(1);
        } elseif ($directoryPath === false) {
            $this->sendFeedback(
                'You either supplied a non-existent directory or an invalid path. Please check',
                'error'
            );
            exit(1);
        } elseif ($directoryPath && !file_exists($directoryPath)) {
            $this->sendFeedback('The given directory does not exist', 'error');
            exit(1);
        } elseif ($directoryPath && file_exists($directoryPath) && !is_dir($directoryPath)) {
            $this->sendFeedback('The given directory appears not to be a directory', 'error');
            exit(1);
        } elseif ($directoryPath && !is_writable($directoryPath)) {
            $this->sendFeedback('The given directory is not writable', 'error');
            exit(1);
        }

        return true;
    }

    private function validateCase(?string $case): bool
    {
        if (is_null($case)) {
            $this->sendFeedback('You did not specify any case', 'error');
            $this->showTip();
            exit(1);
        } elseif ($case === false) {
            $this->sendFeedback("You can't use both '-l' and '-u'. It does not make sense", 'error');
            $this->showTip();
            exit(1);
        }
        return true;
    }

    /**
     * Determines the case to be used in renameing files
     *
     * @param bool $lowercase True if lowercase was specified at the command prompt
     * @param bool $uppercase True if uppercase was specified at the command prompt
     * @return string|null|false Returns 'lower' if lowercase was determined, 'upper' if upperca
     * was determined. False or null represents an error situation
     */
    private function determineCase($lowercase, $uppercase)
    {
        if ($lowercase && !$uppercase) {
            return 'lower';
        } elseif (!$lowercase && $uppercase) {
            return 'upper';
        } elseif ($lowercase && $uppercase) {
            return false;
        } elseif (!$lowercase && !$uppercase) {
            return null;
        }
    }


    /**
     * Sends feedback to output
     *
     * @param string $msg The feedback message
     * @param string $type The type of feedback (error, success, info)
     * @param bool $newLine Whether to append a newline at end of feedback. True by default
     */
    private function sendFeedback($msg, $type = null, $newLine = true)
    {
        $styles = [
            'success' => "\e[1;32m%s\e[m",
            'error' => "\e[1;31;31m%s\e[m",
            'info' => "\e[1;33;33m%s\e[m"
        ];

        $format = '%s';

        if (isset($styles[$type])) {
            $format = $styles[$type];
        }

        if ($newLine) {
            $format .= PHP_EOL;
        }

        printf($format, $msg);
    }

    /**
     * Prints a tip to output showing how help can be obtained
     *
     * @return void
     */
    private function showTip()
    {
        echo <<<TIP
Type caseswitcher -h for help

TIP;
    }

    /**
     * Prints a help message to output
     *
     * @return void
     */
    private function showHelp()
    {
        echo <<<HELP

Caseswitcher help
-----------------

\e[4;1;37mOption\e[m              \e[4;1;37mUsage\e[m
-h                  Show this help
-d [DIRECTORY]      Specify the directory to rename. Must be a valid path and writable
-r                  Instruct caseswitcher to rename recursively
-l                  Instruct caseswitcher to change filenames to lowercase
-u                  Instruct caseswitcher to change filenames to uppercase


\e[4;1;37mExample:\e[m
    \e[1;32meg1: caseswitcher -d path/to/directory -l -r\e[m
    This means change the filenames inside the directory
    to lowercase recursively.

    You can also join options together. The first example
    can be written as:
    \e[1;32meg2: caseswitcher -lrd path/to/directory\e[m


\e[4;1;37mNB:\e[m
You must specify the case you want to switch to. Either -l for
lowercase or -u for uppercase. However, you can't use both -l and -u
together. It won't make sense.
\n
HELP;
    }
}


class CaseSwitcher
{
    /**
     * Path to the directory
     *
     * @var string
     */
    private $directory;

    /**
     * The case to rename files to
     *
     * @var string
     */
    private $case;

    /**
     * Should CaseSwitcher switch filenames recursively?
     *
     * @var bool
     */
    private $recursion;

    /**
     * Error message generated by CaseSwitcher
     *
     * @var string
     */
    private $errMsg;

    /**
     * The state of verboseness of CaseSwitcher
     *
     * @var bool
     */
    private $verboseness;

    /**
     * Iterator to be used in renaming files
     *
     * @var iterator
     */
    private $iterator;

    /**
     * Checks if the supplied path is valid
     *
     * @return bool True if the path is valid, False if it isn't
     */
    private function isValid() : bool
    {
        $dirContents = count(scandir($this->directory));
        if ($dirContents <= 2) {
            $this->errMsg = 'Given directory is empty. Nothing here to rename';
            return false;
        }
        return true;
    }


    /**
     * Rename the the directory contents to the specified case.
     *
     * @return bool
     */
    public function switchCase() : bool
    {
        if ($this->isValid()) {
            $this->iterator = $this->createIterator();
            return $this->renameDirContents($this->iterator);
        } else {
            return false;
        }
    }

    /**
     * Rename contents of a directory either one level deep or recursively
     *
     * @param Iterator $iterator The type of iterator to use
     * @return bool True if the renaming succeeds
     */
    private function renameDirContents(\Iterator $iterator)
    {
        foreach ($iterator as $file) {
            $oldName = $file->getPathName();
            $newName = $this->getNewName($file);
            $renamed = @rename($oldName, $newName);

            if ($this->verboseness && $renamed) {
                $this->reportVerbosity("{$oldName} was renamed to {$newName}");
            }
        }
        return true;
    }


    /**
     * Creates an iterator to be used in renaming the contents of
     * the directory
     *
     * @return void
     * @throws UnexpectedValueException
     */
    private function createIterator()
    {
        switch ($this->recursion) {
            case true:
                return new \RecursiveIteratorIterator(
                    new \RecursiveDirectoryIterator($this->directory),
                    \RecursiveIteratorIterator::CHILD_FIRST
                );
                break;
            case false:
                return new \DirectoryIterator($this->directory);
                break;
            default:
                throw new \UnexpectedValueException('Unknown iterator type supplied');
        }
    }

    /**
     * Reports to output what operation was just performed
     *
     * @param string $msg The report message
     * @return void
     */
    private function reportVerbosity($msg)
    {
        printf("[\e[1;32mOK\e[m] %s" . PHP_EOL, $msg);
    }

    /**
     * Converts filename to the requested case
     *
     * @param string $fileName Name of the file
     * @return string The converted version of the filename
     */
    private function changeCase($fileName) : string
    {
        switch ($this->case) {
            case 'upper':
                return strtoupper($fileName);
                break;
            case 'lower':
                return strtolower($fileName);
                break;
        }
    }


    /**
     * Gets the extension of the file
     *
     * @return string The extension of the file
     */
    private function getExtension($file): string
    {
        return (empty($file)) ? '' : ".{$file}";
    }


    /**
     * Get error message
     *
     * @return string The cuurrent error message
     */
    public function getErrorMsg() : string
    {
        return $this->errMsg;
    }


    /**
     * Generate the new name of the file being renamed. This will be used by the
     * rename() function.
     *
     * @param SplFileInfo $file. The file to be renamed will be an instance of SplFileInfo
     * @return string. The new name of the file after it has been renamed
     */
    private function getNewName(\SplFileInfo $file) : string
    {
        $directory = $file->getPath();
        $filename = $this->changeCase(pathinfo($file->getFilename(), PATHINFO_FILENAME));
        $fileExtension = $this->getExtension($file->getExtension());
        return "{$directory}" . DIRECTORY_SEPARATOR . "{$filename}{$fileExtension}";
    }

    /**
     * Sets the path to the directory whose contents are to be renamed
     *
     * @param string $directory The path to the directory
     * @return void
     */
    public function setDirectory(string $directory)
    {
        $this->directory = realpath($directory);
    }

    /**
     * Sets the case to switch filenames to
     *
     * @param string $case The case. Valid arguments are: 'upper' or 'lower'
     * @return bool True if successful, False if invalid case type is supplied
     * @throws UnexpectedValueException
     */
    public function setCase(string $case)
    {
        if (!in_array($case, ['lower', 'upper'])) {
            throw new \UnexpectedValueException('Unrecognized case type. Use either \'lower\' or \'upper\'');
            return false;
        }

        $this->case = $case;
        return true;
    }

    /**
     * Sets whether CaseSwitcher should be verbose and report
     * what it is doing to output
     *
     * @param boolean $verboseness True for verboseness, False for no verboseness
     * @return void
     */
    public function setVerboseness(bool $verboseness)
    {
        $this->verboseness = $verboseness;
    }

    /**
     * Instructs CaseSwitcher whether to rename files recursively or not
     * Defaults to False
     *
     * @param bool $recursion True to rename recursively. Defaults to False
     * @return void
     */
    public function setRecursion(bool $recursion)
    {
        $this->recursion = $recursion;
    }
}
