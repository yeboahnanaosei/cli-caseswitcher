#! /usr/bin/env php
<?php
$arguments = getopt('d:rhlu');
$help = isset($arguments['h']) ?: false;
$recursion = isset($arguments['r']) ?: false;
$directory = isset($arguments['d']) ? realpath($arguments['d']) : null;
$lowercase = isset($arguments['l']) ?: false;
$uppercase = isset($arguments['u']) ?: false;
$case = getCase();

if (validateArguments()) {
    $switcher = new CaseSwitcher($directory, $case, $recursion);
    if ($switcher->rename()) {
        sendFeedback('Your files were successfully renamed', 'success');
    } else {
        sendFeedback($switcher->getErrorMsg(), 'info');
    }
}


function validateArguments()
{
    global $help, $lowercase, $uppercase, $case, $recursion, $directory;

    if ($help) {
        showHelp();
        exit(1);
    }

    if (is_null($directory)) {
        sendFeedback('Expected a directory. None supplied', 'error');
        showTip();
        exit(1);
    } elseif ($directory === false) {
        sendFeedback('You either supplied a non-existent directory or an invalid path. Please check', 'error');
        exit(1);
    } elseif ($directory && !file_exists($directory)) {
        sendFeedback('The given directory does not exist', 'error');
        exit(1);
    } elseif ($directory && file_exists($directory) && !is_dir($directory)) {
        sendFeedback('The given directory appears not to be a directory', 'error');
        exit(1);
    } elseif ($directory && !is_writable($directory)) {
        sendFeedback('The given directory is not writable', 'error');
        exit(1);
    }

    if (is_null($case)) {
        sendFeedback('You did not specify any case', 'error');
        showTip();
    } elseif ($case === false) {
        sendFeedback("You can't use both '-l' and '-u'. It does not make sense", 'error');
        exit(1);
    }

    return true;
}


function getCase()
{
    global $lowercase, $uppercase;
    if ($lowercase && !$uppercase) {
        $case = 'lower';
    } elseif (!$lowercase && $uppercase) {
        $case = 'upper';
    } elseif ($lowercase && $uppercase) {
        $case = false;
    } elseif (!$lowercase && !$uppercase) {
        $case = null;
    }

    return $case;
}



function sendFeedback($msg, $color = null, $newLine = true)
{
    $styles = array(
        'success' => "\e[1;32m%s\e[m",
        'error' => "\e[1;31;31m%s\e[m",
        'info' => "\e[1;33;33m%s\e[m"
    );

    $format = '%s';

    if (isset($styles[$color])) {
        $format = $styles[$color];
    }

    if ($newLine) {
        $format .= PHP_EOL;
    }

    printf($format, $msg);
}

function showTip()
{
    echo <<<TIP
Type caseswitcher -h for help

TIP;
}

function showHelp()
{
    echo <<<HELP

Caseswitcher help
-----------------

\e[4;1;37mOption\e[m              \e[4;1;37mUsage\e[m
-h                  Show this help
-d [DIRECTORY]      Specify the directory to rename. Must be a valid path and writable
-r                  Instruct caseswitcher to rename recursively
-l                  Instruct caseswitcher to change filenames to lowercase
-u                  Instruct caseswitcher to change filenames to uppercase


\e[4;1;37mExample:\e[m
    \e[1;32meg1: caseswitcher -d path/to/directory -l -r\e[m
    This means change the filenames inside the directory
    to lowercase recursively.

    You can also join options together. The first example
    can be written as:
    \e[1;32meg2: caseswitcher -lrd path/to/directory\e[m


\e[4;1;37mNB:\e[m
You must specify the case you want to switch to. Either -l for
lowercase or -u for uppercase. However, you can't use both -l and -u
together. It won't make sense.
\n
HELP;
}



class CaseSwitcher
{
    private $path;
    private $case;          // Should the file be renamed to uppercase or lowercase?
    private $recursion;
    private $errMsg;


    /**
     * Constructor
     *
     * @param string $path The path to the resource
     * @param string $case The case to rename the files to. Defaults to 'lower'
     * @param string $recursion Specifies if subfolders should also be renamed. Defaults to 'false'
     */
    public function __construct(string $path, string $case, bool $recursion)
    {
        $this->path = realpath($path);
        $this->case = $case;
        $this->recursion = $recursion;
        // $this->restrictedPaths = array_map('realpath', $this->restrictedPaths);
    }

    /**
     * Checks if the supplied path is valid
     *
     * @return bool True if the path is valid, False if it isn't
     */
    private function isValid() : bool
    {
        $dirContents = count(scandir($this->path));
        if ($dirContents <= 2) {
            $this->errMsg = 'Given directory is empty. Nothing here to rename';
            return false;
        }
        return true;
    }


    /**
     * Rename the the directory contents to the specified case.
     *
     * @return bool
     */
    public function rename() : bool
    {
        if ($this->isValid()) {
            return $this->renameDir();
        } else {
            return false;
        }
    }

    /**
     * Rename contents of a directory either one level deep or recursively
     *
     * @return bool True if the renaming succeeds
     */
    private function renameDir()
    {
        switch ($this->recursion) {
            case true:
                $iterator = new \RecursiveIteratorIterator(
                    new \RecursiveDirectoryIterator($this->path),
                    \RecursiveIteratorIterator::CHILD_FIRST
                );
                break;

            case false:
                $iterator = new \DirectoryIterator($this->path);
                break;
        }

        foreach ($iterator as $file) {
            $oldName = $this->getOldName($file);
            $newName = $this->getNewName($file);
            @rename($oldName, $newName);
        }
        return true;
    }


    /**
     * Converts filename to the requested case
     *
     * @param string $fileName Name of the file
     * @return string The converted version of the filename
     */
    private function changeCase($fileName) : string
    {
        switch ($this->case) {
            case 'upper':
                return strtoupper($fileName);
                break;

            case 'lower':
                return strtolower($fileName);
                break;
        }
    }


    /**
     * Gets the extension of the file
     *
     * @return string The extension of the file
     */
    private function getExtension($file)
    {
        return (empty($file)) ? '' : ".{$file}";
    }


    /**
     * Get error message
     *
     * @return string The cuurrent error message
     */
    public function getErrorMsg() : string
    {
        return $this->errMsg;
    }


    /**
     * Generate the new name of the file being renamed. This will be used by the
     * rename() function.
     *
     * @param SplFileInfo $file. The file to be renamed will be an instance of SplFileInfo
     * @return string. The new name of the file after it has been renamed
     */
    private function getNewName(\SplFileInfo $file) : string
    {
        $directory = $file->getPath();
        $filename = $this->changeCase(pathinfo($file->getFilename(), PATHINFO_FILENAME));
        $fileExt = $this->getExtension($file->getExtension());
        return "{$directory}" . DIRECTORY_SEPARATOR . "{$filename}{$fileExt}";
    }


    /**
     * Generate the old name of the file being renamed. This will be used by the
     * rename() function.
     *
     * @param SplFileInfo $file. The file to be renamed will be an instance of SplFileInfo
     * @return string The old name of the file before it was renamed.
     */
    private function getOldName(\SplFileInfo $file) : string
    {
        return $file->getPathName();
    }
}
